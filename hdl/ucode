#   This file is part of JTKCPU.
#   JTKCPU program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.

#   JTKCPU program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with JTKCPU.  If not, see <http://www.gnu.org/licenses/>.

#   Author: Jose Tejada Gomez. Twitter: @topapate
#   Version: 1.0
#   Date: 3-03-2023 

########## INDEX ADDR ##################
PARSE_IDX:          OPD
                    JMP_IDX

IDX_RINC:           IDX_STEP, IDX_RET           # R+
IDX_RINC2:          ADR_IDX, MEM16, SKIP_NOIND  # R++ / [R++]
                    ADR_DATA, MEM16
                    IDX_STEP
                    IDX_STEP, IDX_RET
IDX_RDEC:           IDX_STEP, IDX_RET           #  -R
IDX_RDEC2:          ADR_IDX, MEM16, SKIP_NOIND  # --R / [--R]
                    ADR_DATA, MEM16
                    IDX_STEP,
                    IDX_STEP, IDX_RET
IDX_SUM:            IDX_RET                     # R+ACC/offset 0/5
IDX_OFFSET8:        OPD, SKIP_NOIND             # Fixed offset 8
                    IDX_RET
                    ADR_DATA, MEM16
                    IDX_LD, IDX_RET
IDX_OFFSET16:       OPD, MEMHI                  # Fixed offset 16
                    OPD, SKIP_NOIND
                    IDX_RET
                    ADR_DATA, MEM16
                    IDX_LD, IDX_RET
IDX_EXTIND:         OPD, MEMHI                  # Extended indirect
                    OPD
                    ADR_DATA, MEM16
                    IDX_LD, IDX_RET

########## ALU OPERATIONS ##################
SINGLE_ALU:         OPD
                    OPN0=REGS, UPREGS=ALU
                    NI

SINGLE_ALU_16:      OPD, MEM16
                    OPN0=REGS, UPREGS=ALU
                    NI

SINGLE_ALU_INH:     OPN0=REGS, UPREGS=ALU
                    NI

SINGLE_ALU_INH16:   OPN0=REGS, UPREGS=ALU
                    NI

SINGLE_ALU_IDX:     OPD, IDX_EN
                    ADRIDX
                    OPN0=REGS, UPREGS=ALU
                    NI

SINGLE_ALU_IDX16:   OPD, IDX_EN
                    ADRIDX, MEM16
                    OPN0=REGS, UPREGS=ALU
                    NI

MULTI_ALU:          OPD
                    OPN0=REGS, WAITALU, UPREGS=ALU
                    NI

MEM_ALU_IDX:        OPD, IDX_EN
                    ADRIDX
                    OPN0=MEM, WE
                    NI

MULTI_ALU_INH:      OPD
                    OPN0=REGS, UPREGS=ALU, WAITALU
                    NI

MULTI_ALU_IDX:      OPD, IDX_EN
                    ADRIDX
                    OPN0=REGS, UPREG=ALU, WAITALU
                    NI

WMEM_ALU:           OPD, IDX_EN
                    ADRIDX
                    OPN0=MEM, UPDATA, WAITALU
                    ADRIDX, WE
                    NI

MULTIPLY:           NOP     # 11 cycles in 6809 (8 here)
                    NOP
                    NOP
                    NOP
                    NOP
                    NOP     # 6th clock tick
                    UPREG=ALU
                    NI

LMULTIPLY:          NOP     # 20+ cycles in original
                    NOP
                    NOP
                    NOP
                    NOP
                    NOP     # 6th clock tick
                    UP_LMUL # Result goes to {Y,X}
                    NI

######### DECREMENT AND LOOP ##############
LOOPX:              OPD, DECX       # CHECK THAT DECX GOES FIRST
                    PC_XNZ=BRANCH
                    NI

LOOPB:              OPD, DECB
                    PC_BNZ=BRANCH,
                    NI

######### STRING OPERATIONS ##############
MOVE:               OPD, ADRY
                    OPN0=MEM, WE, ADRX, DECU, INCY,
                    INCX, NI

BMOVE:              OPD, ADRY,
                    OPN0=MEM, WE, ADRX, DECU, INCY,
                    INCX, BACK2_UNZ
                    NI

BSETA:              OPN0=A, WE, ADRX, DECU,
                    INCX, BACK1_UNZ
                    NI

BSETD:              OPN0=A, WE, ADRX, INCX,
                    OPN0=B, WE, ADRX, INCX, DECU
                    BACK2_UNZ
                    NI

############### LOAD/STORE OPERATIONS ############
STORE8:             OPD, IDX_EN
                    OPN0=REGS, ADRIDX, WE,
                    NI

STORE16:            OPD, IDX_EN
                    OPN0=REGS, ADRIDX, WE, MEM16,
                    NI

LD8_IMM:            OPD
                    UPLD8
                    NI

LD8_IDX:            OPD, IDX_EN
                    ADRIDX
                    UPLD8
                    NI

LD16_IMM:           OPD, MEMHI
                    OPD
                    UPLD16
                    NI

LD16_IDX:           OPD, IDX_EN
                    ADRIDX, MEM16
                    UPLD16
                    NI

LEA:                OPD, IDX_EN
                    UPLEA
                    NI

############### MISC OPERATIONS ##################
SETLINES:           OPD
                    UPLINES, NI

NOPE:               NI

############### FLOW CONTROL #####################
SBRANCH:            OPD
                    PC=BRANCH8
                    NI

# LONG BRANCH IS NOT RELATIVE, RIGHT ???
LBRANCH:            OPD, MEM16
                    PC=BRANCH16
                    NI

JUMP:               OPD, MEM16
                    PC=JMP
                    NI

JMSR:               OPD, MEM16
                    PSH_PC, PSH_GO
                    WE, WAIT_STACK
                    PC=JMP, MEM16
                    NI

RTIT:               RTI_CC, PUL_GO
                    WAIT_STACK
                    RTI_OTHER, PUL_GO
                    WAIT_STACK
                    NI

RTSR:               PUL_PC
                    WAIT_STACK
                    NI

############### STACK ##################
PSH:                OPD,
                    PSH_GO
                    WE, WAIT_STACK
                    NI

PUL:                OPD
                    PUL_GO
                    WAIT_STACK
                    NI

########### INTERRUPTS ####################
RESET:              PC=INT
                    NI

FIRQ:               PSHCC
                    E=0, F=1, I=1
                    PSHPC
                    PC=INT
                    NI

IRQ:                PSHALL
                    E=1, I=1
                    PC=INT
                    NI

NMI:                PSHALL
                    E=1, I=1, F=1
                    PC=INT
                    NI
BUSERROR:           HALT