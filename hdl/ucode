#   This file is part of JTKCPU.
#   JTKCPU program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.

#   JTKCPU program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with JTKCPU.  If not, see <http://www.gnu.org/licenses/>.

#   Author: Jose Tejada Gomez. Twitter: @topapate
#   Version: 1.0
#   Date: 3-03-2023

########## INDEX ADDR ##################
PARSE_IDX:          OPD
                    IDX_JMP
                    # IDX_IND either jumps to IDX_IND or
                    # does a IDX_RET depending on the indirect bit
IDX_R:              NOP
                    IDX_IND
IDX_RINC:           IDX_POST=1                  # 0 - R+
                    IDX_IND
IDX_RINC2:          IDX_POST=1, IDXW=1          # 1 - R++ / [R++]
                    IDX_IND
IDX_RDEC:           IDX_PRE
                    IDX_IND                     # 2 -  -R
IDX_RDEC2:          IDX_PRE, IDXW=1
                    IDX_IND                     # 3 - --R
IDX_OFFSET8:        OPD                         # 4 -  8-bit offset
                    IDX_8, IDX_IND
IDX_OFFSET16:       OPD, MEMHI                  # 5 - 16-bit offset
                    OPD
                    IDX_16, IDX_IND
IDX_IND:            IDX_EN, MEMHI              # 6 - ,R
                    IDX_EN, IDX_ADV
                    DATA2ADDR, IDX_RET
IDX_EXT:            OPD, MEMHI                  # 7 Extended
                    OPD
                    DATA2ADDR, IDX_IND
IDX_DP:             OPD                         # 1,4  - DP
                    IDX_DP, IDX_IND
IDX_ACC:            NOP
                    IDX_ACC=1, IDX_IND            # 1,other  - A, B or D


########## ALU OPERATIONS ##################
SINGLE_ALU:         OPD
                    OPN0=REGS, UP_CC, UP_LD8
                    NI

CMP8:               OPD
                    OPN0=REGS, UP_CC
                    NI

CMP8_IDX:           IDX_EN
                    OPN0=REGS, UP_CC
                    NI

SINGLE_ALU_16:      OPD, MEMHI
                    OPD
                    OPN0=REGS, UP_CC, UP_LD16
                    NI

CMP16:              OPD, MEMHI
                    OPD
                    OPN0=REGS, UP_CC
                    NI

CMP16_IDX:          IDX_EN, MEMHI
                    IDX_EN, IDX_ADV
                    OPN0=REGS, UP_CC
                    NI

SINGLE_A_INH:       OPN0=REGS, UP_CC, UP_LDA
                    NI

SINGLE_B_INH:       OPN0=REGS, UP_CC, UP_LDB
                    NI

SINGLE_ALU_INH16:   OPN0=REGS, UP_CC, UP_AB
                    NI

SINGLE_ALU_IDX:     IDX_EN
                    OPN0=REGS, UP_CC, UP_LD8
                    NI

SINGLE_ALU_IDX16:   IDX_EN, MEMHI
                    IDX_EN, IDX_ADV
                    OPN0=REGS, UP_CC, UP_LD16
                    NI

MULTI_ALU:          OPD
                    OPN0=REGS, WAITALU, UP_CC
                    NI

MEM_ALU_IDX:        IDX_EN
                    OPN0=MEM, WE
                    NI

MULTI_ALU_INH:      OPD
                    OPN0=REGS, UP_CC, WAITALU
                    NI

MULTI_ALU_IDX:      IDX_EN
                    OPN0=REGS, UP_CC, WAITALU
                    NI

WMEM_ALU:           IDX_EN
                    OPN0=MEM, UP_DATA, WAITALU
                    IDX_EN, WE
                    NI

MULTIPLY:           NOP     # 11 cycles in 6809 (8 here)
                    NOP
                    NOP
                    NOP
                    NOP
                    NOP     # 6th clock tick
                    UP_CC, UP_AB
                    NI

LMULTIPLY:          NOP     # 20+ cycles in original
                    NOP
                    NOP
                    NOP
                    NOP
                    NOP     # 6th clock tick
                    UP_LMUL # Result goes to {Y,X}
                    NI

######### DECREMENT AND LOOP ##############
LOOPX:              OPD, DECX       # CHECK THAT DECX GOES FIRST
                    PC_XNZ=BRANCH
                    NI

LOOPB:              OPD, DECB
                    PC_BNZ=BRANCH,
                    NI

######### STRING OPERATIONS ##############
MOVE:               OPD, ADRY
                    OPN0=MEM, WE, ADRX, DECU, INCY,
                    INCX, NI

BMOVE:              OPD, ADRY,
                    OPN0=MEM, WE, ADRX, DECU, INCY,
                    INCX, BACK2_UNZ
                    NI

BSETA:              OPN0=A, WE, ADRX, DECU,
                    INCX, BACK1_UNZ
                    NI

BSETD:              OPN0=A, WE, ADRX, INCX,
                    OPN0=B, WE, ADRX, INCX, DECU
                    BACK2_UNZ
                    NI

############### LOAD/STORE OPERATIONS ############
STORE8:             OPN0=REGS, IDX_EN, WE,
                    NI

STORE16:            OPN0=REGS, IDX_EN, WE, MEMHI
                    OPN0=REGS, IDX_EN, WE, IDX_ADV
                    NI

# LD8_IMM:            OPD
#                     UP_LD8
#                     NI
#
# LD8_IDX:            IDX_EN
#                     UP_LD8
#                     NI
#
# LD16_IMM:           OPD, MEMHI
#                     OPD
#                     UP_LD16
#                     NI
#
# LD16_IDX:           IDX_EN, MEMHI
#                     IDX_EN
#                     UP_LD16
#                     NI

LEA:                UP_LEA, UP_CC
                    NI

############### MISC OPERATIONS ##################
SETLINES:           OPD
                    UP_LINES, NI

NOPE:               NI

############### FLOW CONTROL #####################
SBRANCH:            OPD
                    PC=BRANCH8
                    NI

SBSR:               OPD
                    PSH_PC, PSH_GO
                    NOP
                    PC=BRANCH8
                    NI

BSRL:               OPD, MEMHI
                    OPD
                    PSH_PC, PSH_GO
                    NOP
                    PC=BRANCH16
                    NI

LBRANCH:            OPD, MEMHI
                    OPD
                    PC=BRANCH16
                    NI

JUMP:               PC_JMP
                    NI

JMSR:               PSH_PC, PSH_GO
                    NOP
                    PC_JMP
                    NI

RTIT:               RTI_CC, PUL_GO
                    RTI_OTHER, PUL_GO
                    NOP
                    NI

RTSR:               PUL_PC
                    NOP
                    NI

############### STACK ##################
PSH:                OPD
                    PSH_GO
                    NOP
                    NOP
                    NI

PUL:                OPD
                    PUL_GO
                    NOP
                    NOP
                    NI

########### INTERRUPTS ####################
RESET:              INT_EN
                    NOP
                    NOP
                    NOP
                    NI
                    NOP

FIRQ:               PSH_CC
                    E=0, F=1, I=1, PSH_PC
                    INT_EN
                    NOP
                    NOP
                    NOP
                    NI

IRQ:                PSH_ALL
                    E=1, I=1, INT_EN
                    NOP
                    NOP
                    NOP
                    NI

NMI:                PSH_ALL
                    E=1, I=1, F=1, INT_EN
                    NOP
                    NOP
                    NOP
                    NI

BUSERROR:           BUSERROR